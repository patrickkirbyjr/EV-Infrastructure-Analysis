rename(gas_stations = X2012) |>
rename(state = State)
gas_stations$state <- state.abb[match(gas_stations$state, state.name)]
gas_stations
ev_gas_stations <- ev_stats |>
left_join(gas_stations) |>
select(state, total_stations, gas_stations) |>
mutate(difference = gas_stations - total_stations) |>
arrange(desc(difference))
ev_gas_stations
ev_gas_stats <- ev_stats |>
left_join(gas_stations)
model_lm_gas = lm(total_stations ~ registration_count + population + gas_stations, data = ev_gas_stats)
summary(model_lm_gas)
ev_gas_predicted <- ev_gas_stats |>
mutate(expected_stations = round(predict(model_lm_gas), 0),
station_gap = expected_stations - total_stations) |>
arrange(desc(station_gap))
ev_gas_predicted
plot_usmap(data = ev_gas_predicted, values = "station_gap", color = "white") +
scale_fill_gradient2(
low = "blue", mid = "white", high = "red",
midpoint = 0, name = "Station Gap"
) +
labs(
title = "EV Charging Station Gaps by State (LM w/ Registration + Population + Gas Stations)",
subtitle = "Red = Underbuilt, Blue = Overbuilt"
)
ggsave("outputs/ev_charging_station_gaps_by_state_2.png", bg = "skyblue")
library(randomForest)
model_rfr_gas = randomForest(total_stations ~ registration_count + population + gas_stations, data = ev_gas_stats)
summary(model_rfr_gas)
ev_gas_predicted_rfr <- ev_gas_stats |>
mutate(expected_stations = round(predict(model_rfr_gas), 0),
station_gap = expected_stations - total_stations) |>
arrange(desc(station_gap))
ev_gas_predicted_rfr
plot_usmap(data = ev_gas_predicted_rfr, values = "station_gap", color = "white") +
scale_fill_gradient2(
low = "blue", mid = "white", high = "red",
midpoint = 0, name = "Station Gap"
) +
labs(
title = "EV Charging Station Gaps by State (RF w/ Registration + Population + Gas Stations)",
subtitle = "Red = Underbuilt, Blue = Overbuilt"
)
ggsave("outputs/ev_charging_station_gaps_by_state_3.png", bg = "skyblue")
library(gbm)
model_gbm_gas = gbm(total_stations ~ registration_count + population + gas_stations, data = ev_gas_stats,
distribution = "gaussian", n.trees = 100)
summary(model_gbm_gas)
ev_gas_predicted_gbm <- ev_gas_stats |>
mutate(expected_stations = round(predict(model_gbm_gas), 0),
station_gap = expected_stations - total_stations) |>
arrange(desc(station_gap))
ev_gas_predicted_gbm
plot_usmap(data = ev_gas_predicted_gbm, values = "station_gap", color = "white") +
scale_fill_gradient2(
low = "blue", mid = "white", high = "red",
midpoint = 0, name = "Station Gap"
) +
labs(
title = "EV Charging Station Gaps by State (GBM w/ Registration + Population + Gas Stations)",
subtitle = "Red = Underbuilt, Blue = Overbuilt"
)
ggsave("outputs/ev_charging_station_gaps_by_state_4.png", bg = "skyblue")
ev_gas <- ev_gas_stats |>
rename(ev_stations = total_stations,
ev_registrations = registration_count)
ev_gas
state_areas <- read.csv("data/state_areas.csv")
state_areas$state <- state.abb[match(state_areas$state, state.name)]
state_areas
ev_gas_area <- ev_gas |>
left_join(state_areas) |>
arrange(desc(sq_mi))
ev_gas_area
model_lm <- lm(ev_stations ~ ev_registrations + population, data = ev_gas_area)
model_lm_gas <- lm(ev_stations ~ ev_registrations + population + gas_stations, data = ev_gas_area)
model_lm_area <- lm(ev_stations ~ ev_registrations + population + sq_mi, data = ev_gas_area)
model_lm_gas_area<- lm(ev_stations ~ ev_registrations + population + gas_stations + sq_mi, data = ev_gas_area)
summary(model_lm)
summary(model_lm_gas)
summary(model_lm_area)
summary(model_lm_gas_area)
ev_gas_area_predicted_lm<- ev_gas_area |>
mutate(expected_stations = round(predict(model_lm_gas_area), 0),
station_gap = expected_stations - ev_stations) |>
arrange(desc(station_gap))
ev_gas_area_predicted_lm
plot_usmap(data = ev_gas_area_predicted_lm, values = "station_gap", color = "white") +
scale_fill_gradient2(
low = "blue", mid = "white", high = "red",
midpoint = 0, name = "Station Gap"
) +
labs(
title = "EV Charging Station Gaps by State (LM w/ Registration + Population + Gas Stations + Area)",
subtitle = "Red = Underbuilt, Blue = Overbuilt"
)
ggsave("outputs/ev_charging_station_gaps_by_state_5.png", bg = "skyblue")
anova(model_lm, model_lm_gas)
anova(model_lm, model_lm_area)
anova(model_lm, model_lm_gas_area)
model_rfr <- randomForest(ev_stations ~ ev_registrations + population, data = ev_gas_area)
model_rfr_gas <- randomForest(ev_stations ~ ev_registrations + population + gas_stations, data = ev_gas_area)
model_rfr_area <- randomForest(ev_stations ~ ev_registrations + population + sq_mi, data = ev_gas_area)
model_rfr_gas_area<- randomForest(ev_stations ~ ev_registrations + population + gas_stations + sq_mi, data = ev_gas_area)
importance(model_rfr)
importance(model_rfr_gas)
importance(model_rfr_area)
importance(model_rfr_gas_area)
library(rfPermute)
model_rfr_perm <- rfPermute(ev_stations ~ ev_registrations + population, data = ev_gas_area)
model_rfr_gas_perm <- rfPermute(ev_stations ~ ev_registrations + population + gas_stations, data = ev_gas_area)
model_rfr_area_perm <- rfPermute(ev_stations ~ ev_registrations + population + sq_mi, data = ev_gas_area)
model_rfr_gas_area_perm <- rfPermute(ev_stations ~ ev_registrations + population + gas_stations + sq_mi, data = ev_gas_area)
summary(model_rfr_perm)
summary(model_rfr_gas_perm)
summary(model_rfr_area_perm)
summary(model_rfr_gas_area_perm)
ev_locations <- read_csv("data/ev_station_locations.csv") |>
filter(!is.na(latitude), !is.na(longitude)) |>
filter(state == "PA")
ev_locations
library(sf)
coordinates <- ev_locations |>
select(longitude, latitude) |>
as.data.frame()
stations_sf <- st_as_sf(coordinates,
coords = c("longitude", "latitude"),
crs = 4326
)
stations_sf <- st_make_valid(stations_sf)
stations_sf
library(ggplot2)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthdata)
us <- ne_countries(scale = "medium", returnclass = "sf") |>
filter(admin == "United States of America")
ggplot(data = us) +
geom_sf() +
geom_sf(data = stations_sf, color = "green", size = 0.1) +
coord_sf(xlim = c(-81, -74), ylim = c(39, 43), expand = FALSE)
library(tidycensus)
population <- get_acs(geography = "county",
variables = "B01003_001",
year = 2022,
geometry = TRUE)
population <- st_transform(population, st_crs(stations_sf)) # match CRS
population <- st_make_valid(population) # make valid
library(osmdata)
highways_pa <- opq(bbox = c(-80.52, 39.72, -74.70, 42.27)) |>
add_osm_feature(key = 'highway', value = c('motorway')) |>
osmdata_sf()
library(dplyr)
buffers <- st_buffer(stations_sf, dist = 16093) # 10 mile buffer
coverage_area <- st_make_valid(st_union(buffers)) # eliminate overlapping buffers
uncovered <- st_make_valid(st_difference(st_union(st_geometry(population)), coverage_area)) # uncovered area
ggplot() +
geom_sf(data = population, fill = "white", color = "gray") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.4) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station")
ggsave("outputs/coverage_maps/ev_station_coverage_1.png")
ev_locations <- read_csv("data/ev_station_locations.csv") |>
filter(!is.na(latitude), !is.na(longitude))
ev_locations
library(tidyverse)
library(sf)
library(tidycensus)
library(osmdata)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
analyze_ev_coverage <- function(state_abbr, buffer) {
# filter EV locations to selected state
ev_locations_state <- ev_locations |> filter(state == state_abbr)
coords <- ev_locations_state |> select(longitude, latitude) |> as.data.frame()
stations_sf <- st_as_sf(coords,
coords = c("longitude", "latitude"),
crs = 4326
) |> st_make_valid()
# get population data for counties in selected state
population <- get_acs(geography = "county",
variables = "B01003_001",
year = 2022,
geometry = TRUE,
state = state_abbr)
population <- st_transform(population, st_crs(stations_sf)) |> st_make_valid()
#create bbox
bbox <- st_bbox(population)
# create buffers (enter in miles and it will convert to meters)
buffers <- st_buffer(stations_sf, dist = buffer * 1609)
coverage_area <-st_make_valid(st_union(buffers))
# determine uncovered areas
uncovered <- st_make_valid(st_difference(st_union(st_geometry(population)), coverage_area))
# plot coverage map
ggplot() +
geom_sf(data = population, fill = "white", color = "gray") +
geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.4) +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.5) +
coord_sf(xlim = c(bbox["xmin"], bbox["xmax"]), ylim = c(bbox["ymin"], bbox["ymax"]), expand = FALSE) +
ggtitle(paste0(state_abbr, "EV Station Coverage (", buffer, " Mile Convenience)")) +
labs(subtitle = paste("Areas in green are within", buffer, "miles of an EV station"))
# save to file
ggsave(paste0("outputs/coverage_maps/ev_station_coverage_", state_abbr, "_", buffer, "mi.png"))
}
analyze_ev_coverage("PA", 10)
top_underbuilt_states <- c("TX", "FL", "NJ", "IL", "NV", "PA")
buffers <- c(5, 10, 15, 20)
for (state in top_underbuilt_states) {
for (buffer in buffers) {
cat("Creating coverage map for", state, "with buffer", buffer, "miles...\n")
plot_obj <- analyze_ev_coverage(state, buffer)
}
}
ev_locations <- read_csv("data/ev_station_locations.csv") |>
filter(!is.na(latitude), !is.na(longitude))
ev_locations
library(tidyverse)
library(sf)
library(tidycensus)
library(osmdata)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
analyze_ev_coverage <- function(state_abbr, buffer) {
# filter EV locations to selected state
ev_locations_state <- ev_locations |> filter(state == state_abbr)
coords <- ev_locations_state |> select(longitude, latitude) |> as.data.frame()
stations_sf <- st_as_sf(coords,
coords = c("longitude", "latitude"),
crs = 4326
) |> st_make_valid()
# get population data for counties in selected state
population <- get_acs(geography = "county",
variables = "B01003_001",
year = 2022,
geometry = TRUE,
state = state_abbr)
population <- st_transform(population, st_crs(stations_sf)) |> st_make_valid()
#create bbox
bbox <- st_bbox(population)
# create buffers (enter in miles and it will convert to meters)
buffers <- st_buffer(stations_sf, dist = buffer * 1609)
coverage_area <-st_make_valid(st_union(buffers))
# determine uncovered areas
uncovered <- st_make_valid(st_difference(st_union(st_geometry(population)), coverage_area))
# plot coverage map
ggplot() +
geom_sf(data = population, fill = "white", color = "gray") +
geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.4) +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.5) +
coord_sf(xlim = c(bbox["xmin"], bbox["xmax"]), ylim = c(bbox["ymin"], bbox["ymax"]), expand = FALSE) +
ggtitle(paste0(state_abbr, " EV Station Coverage (", buffer, " Mile Convenience)")) +
labs(subtitle = paste("Areas in green are within", buffer, "miles of an EV station"))
# save to file
ggsave(paste0("outputs/coverage_maps/ev_station_coverage_", state_abbr, "_", buffer, "mi.png"))
}
analyze_ev_coverage("PA", 10)
top_underbuilt_states <- c("TX", "FL", "NJ", "IL", "NV", "PA")
buffers <- c(5, 10, 15, 20)
for (state in top_underbuilt_states) {
for (buffer in buffers) {
cat("Creating coverage map for", state, "with buffer", buffer, "miles...\n")
plot_obj <- analyze_ev_coverage(state, buffer)
}
}
population <- population |>
mutate(area_km2 = as.numeric(st_area(geometry)) / 1e6,
pop_density = estimate / area_km2)
ggplot() +
geom_sf(data = population, aes(fill = pop_density), color = "gray") +
scale_fill_verisis_c(option = "plasma", trans = "log",
name = "Population Density\n(people/km2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.4) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station")
population <- population |>
mutate(area_km2 = as.numeric(st_area(geometry)) / 1e6,
pop_density = estimate / area_km2)
ggplot() +
geom_sf(data = population, aes(fill = pop_density), color = "gray") +
scale_fill_veridis_c(option = "plasma", trans = "log",
name = "Population Density\n(people/km2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.4) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station")
population <- population |>
mutate(area_km2 = as.numeric(st_area(geometry)) / 1e6,
pop_density = estimate / area_km2)
ggplot() +
geom_sf(data = population, aes(fill = pop_density), color = "gray") +
scale_fill_viridis_c(option = "plasma", trans = "log",
name = "Population Density\n(people/km2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.4) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station")
#ggsave("outputs/coverage_maps/ev_station_coverage_population.png")
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
ggplot() +
geom_sf(population, aes(fill = pop_density), color = "gray") +
scale_fill_viridis_c(option = "plasma",
name = "Population Density\n(people/km2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.4) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station")
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
ggplot() +
geom_sf(population, aes(fill = pop_density), color = "gray") +
scale_fill_viridis_c(option = "plasma", trans = "log",
name = "Population Density\n(people/km2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.4) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station")
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
ggplot() +
geom_sf(data = population, aes(fill = pop_density), color = "gray") +
scale_fill_viridis_c(option = "plasma",
name = "Population Density\n(people/km2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.4) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station")
#ggsave("outputs/coverage_maps/ev_station_coverage_population.png")
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
ggplot() +
geom_sf(data = population, aes(fill = pop_density), color = "gray") +
scale_fill_viridis_c(option = "plasma", trans = "log",
name = "Population Density\n(people/mi2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.4) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station")
#ggsave("outputs/coverage_maps/ev_station_coverage_population.png")
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
ggplot() +
geom_sf(data = population, aes(fill = pop_density), color = "gray") +
scale_fill_viridis_c(option = "plasma", trans = "log",
name = "Population Density\n(people/mi2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.2) +
geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.2) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station")
#ggsave("outputs/coverage_maps/ev_station_coverage_population.png")
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
ggplot() +
geom_sf(data = population, aes(fill = pop_density), color = "gray") +
scale_fill_viridis_c(option = "plasma", trans = "log",
name = "Population Density\n(people/mi2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.2) +
#  geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.2) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station")
#ggsave("outputs/coverage_maps/ev_station_coverage_population.png")
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
ggplot() +
geom_sf(data = population, aes(fill = pop_density), color = "white") +
scale_fill_viridis_c(option = "plasma", trans = "log",
name = "Population Density\n(people/mi2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.2) +
#  geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.2) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station")
#ggsave("outputs/coverage_maps/ev_station_coverage_population.png")
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
ggplot() +
geom_sf(data = population, aes(fill = pop_density), color = "white", size = 0.2) +
scale_fill_viridis_c(option = "plasma", trans = "log",
name = "Population Density\n(people/mi2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.2) +
#  geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.2) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station")
#ggsave("outputs/coverage_maps/ev_station_coverage_population.png")
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
ggplot() +
geom_sf(data = population, aes(fill = pop_density), color = "white", size = 0.2) +
scale_fill_viridis_c(option = "plasma", trans = "log",
name = "Population Density\n(people/mi2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.2) +
#  geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.2) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station") +
theme_minimal()
#ggsave("outputs/coverage_maps/ev_station_coverage_population.png")
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
ggplot() +
geom_sf(data = population, aes(fill = pop_density), color = "white", size = 0.2) +
scale_fill_viridis_c(option = "plasma", trans = "log",
name = "Population Density\n(people/mi2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.2) +
#  geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.2) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station") +
theme_minimal(base_size = 12)
#ggsave("outputs/coverage_maps/ev_station_coverage_population.png")
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
ggplot() +
geom_sf(data = population, aes(fill = pop_density), color = "white", size = 0.2) +
scale_fill_viridis_c(option = "plasma", trans = "log",
name = "Population Density\n(people/mi2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.2) +
#  geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.2) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station") +
#  theme_minimal(base_size = 12)
#ggsave("outputs/coverage_maps/ev_station_coverage_population.png")
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
ggplot() +
geom_sf(data = population, aes(fill = pop_density), color = "white", size = 0.2) +
scale_fill_viridis_c(option = "plasma", trans = "log",
name = "Population Density\n(people/mi2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.2) +
#  geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.2) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station")
#  theme_minimal(base_size = 12)
#ggsave("outputs/coverage_maps/ev_station_coverage_population.png")
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
ggplot() +
geom_sf(data = population, aes(fill = pop_density), color = "white", size = 0.2) +
scale_fill_viridis_c(option = "plasma",
trans = "log",
labels = label_comma(accuracy = 1),
name = "Population Density\n(people/mi2)") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.2) +
#  geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.2) +
coord_sf(xlim = c(-81, -74.25), ylim = c(39.25, 42.5), expand = FALSE) +
ggtitle("Pennsylvania EV Station Coverage (10 Mile Convenience)") +
labs(subtitle = "Areas in green are within 10 miles of an EV station") +
theme_minimal(base_size = 12)
install.packages(*"scales")
install.packages("scales")
library(scales)
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
#install.packages("scales")
library(scales)
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
ev_locations <- read_csv("data/ev_station_locations.csv") |>
filter(!is.na(latitude), !is.na(longitude)) |>
filter(state == "PA")
#install.packages("scales")
library(scales)
population <- population |>
mutate(area_mi2 = as.numeric(st_area(geometry)) / 2.59e6,
pop_density = estimate / area_mi2)
ev_locations <- read_csv("data/ev_station_locations.csv") |>
filter(!is.na(latitude), !is.na(longitude)) |>
filter(state == "PA")
ev_locations <- read_csv("data/ev_station_locations.csv") |>
filter(!is.na(latitude), !is.na(longitude)) |>
filter(state == "PA")
ev_locations <- read_csv("data/ev_station_locations.csv") |>
filter(!is.na(latitude), !is.na(longitude)) |>
filter(state == "PA")
ev_locations <- read_csv("data/ev_station_locations.csv") |>
filter(!is.na(latitude), !is.na(longitude)) |>
filter(state == "PA")
