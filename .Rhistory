geom_sf(data = stations_sf, color = "green", size = 0.1) +
coord_sf(xlim = c(-85, -75), ylim = c(20, 55), expand = FALSE)
library(ggplot2)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthdata)
us <- ne_countries(scale = "medium", returnclass = "sf") |>
filter(admin == "United States of America")
ggplot(data = us) +
geom_sf() +
geom_sf(data = stations_sf, color = "green", size = 0.1) +
coord_sf(xlim = c(-80, -70), ylim = c(20, 55), expand = FALSE)
library(ggplot2)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthdata)
us <- ne_countries(scale = "medium", returnclass = "sf") |>
filter(admin == "United States of America")
ggplot(data = us) +
geom_sf() +
geom_sf(data = stations_sf, color = "green", size = 0.1) +
coord_sf(xlim = c(-85, -70), ylim = c(20, 55), expand = FALSE)
library(ggplot2)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthdata)
us <- ne_countries(scale = "medium", returnclass = "sf") |>
filter(admin == "United States of America")
ggplot(data = us) +
geom_sf() +
geom_sf(data = stations_sf, color = "green", size = 0.1) +
coord_sf(xlim = c(-85, -70), ylim = c(35, 45), expand = FALSE)
library(ggplot2)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthdata)
us <- ne_countries(scale = "medium", returnclass = "sf") |>
filter(admin == "United States of America")
ggplot(data = us) +
geom_sf() +
geom_sf(data = stations_sf, color = "green", size = 0.1) +
coord_sf(xlim = c(-85, -70), ylim = c(39, 45), expand = FALSE)
library(ggplot2)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthdata)
us <- ne_countries(scale = "medium", returnclass = "sf") |>
filter(admin == "United States of America")
ggplot(data = us) +
geom_sf() +
geom_sf(data = stations_sf, color = "green", size = 0.1) +
coord_sf(xlim = c(-85, -70), ylim = c(39, 44), expand = FALSE)
library(ggplot2)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthdata)
us <- ne_countries(scale = "medium", returnclass = "sf") |>
filter(admin == "United States of America")
ggplot(data = us) +
geom_sf() +
geom_sf(data = stations_sf, color = "green", size = 0.1) +
coord_sf(xlim = c(-85, -70), ylim = c(39, 43), expand = FALSE)
library(ggplot2)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthdata)
us <- ne_countries(scale = "medium", returnclass = "sf") |>
filter(admin == "United States of America")
ggplot(data = us) +
geom_sf() +
geom_sf(data = stations_sf, color = "green", size = 0.1) +
coord_sf(xlim = c(-81, -74), ylim = c(39, 43), expand = FALSE)
buffers <- st_buffer(stations_sf, dist = 16093) # 10 mile buffer
coverage_area <- st_union(buffers) # eliminate overlapping buffers
uncovered <- st_difference(st_union(st_geometry(populations)), coverage_area) # uncovered area
buffers <- st_buffer(stations_sf, dist = 16093) # 10 mile buffer
coverage_area <- st_union(buffers) # eliminate overlapping buffers
uncovered <- st_difference(st_union(st_geometry(population)), coverage_area) # uncovered area
library(tidycensus)
population <- get_acs(geography = "county",
variables = "B01003_001",
year = 2022,
geometry = TRUE)
population <- st_transform(population, st_crs(stations_df))
library(tidycensus)
population <- get_acs(geography = "county",
variables = "B01003_001",
year = 2022,
geometry = TRUE)
population <- st_transform(population, st_crs(stations_sf))
buffers <- st_buffer(stations_sf, dist = 16093) # 10 mile buffer
coverage_area <- st_union(buffers) # eliminate overlapping buffers
uncovered <- st_difference(st_union(st_geometry(population)), coverage_area) # uncovered area
ev_locations <- read_csv("ev_station_locations.csv") |>
filter(!is.na(latitude), !is.na(longitude)) |>
filter(state == "PA")
ev_locations
coordinates <- ev_locations |>
select(longitude, latitude) |>
as.data.frame()
stations_sf <- st_as_sf(coordinates,
coords = c("longitude", "latitude"),
crs = 4326
)
stations_sf <- st_make_valid(stations_sf)
stations_sf
library(ggplot2)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthdata)
us <- ne_countries(scale = "medium", returnclass = "sf") |>
filter(admin == "United States of America")
ggplot(data = us) +
geom_sf() +
geom_sf(data = stations_sf, color = "green", size = 0.1) +
coord_sf(xlim = c(-81, -74), ylim = c(39, 43), expand = FALSE)
library(tidycensus)
population <- get_acs(geography = "county",
variables = "B01003_001",
year = 2022,
geometry = TRUE)
population <- st_transform(population, st_crs(stations_sf)) # match CRS
population <- st_make_valid(population) # make valid
library(osmdata)
highways_pa <- opq(bbox = c(-80.52, 39.72, -74.70, 42.27)) |>
add_osm_feature(key = 'highway', value = c('motorway')) |>
osmdata_sf()
buffers <- st_buffer(stations_sf, dist = 16093) # 10 mile buffer
coverage_area <- st_union(buffers) # eliminate overlapping buffers
uncovered <- st_difference(st_union(st_geometry(population)), coverage_area) # uncovered area
invalid <- which(!st_is_valid(population))
population[invalid, ]
print(uncovered)
buffers <- st_buffer(stations_sf, dist = 16093) # 10 mile buffer
coverage_area <- st_union(buffers) # eliminate overlapping buffers
uncovered <- st_difference(st_union(st_geometry(population)), coverage_area) # uncovered area
buffers <- st_buffer(stations_sf, dist = 16093) # 10 mile buffer
coverage_area <- st_union(buffers) # eliminate overlapping buffers
uncovered <- st_make_valid(st_difference(st_union(st_geometry(population)), coverage_area)) # uncovered area
buffers <- st_buffer(stations_sf, dist = 16093) # 10 mile buffer
coverage_area <- st_make_valid(st_union(buffers)) # eliminate overlapping buffers
uncovered <- st_make_valid(st_difference(st_union(st_geometry(population)), coverage_area)) # uncovered area
uncovered_pop <- st_intersection(population, uncovered) |>
group_by(NAME) |>
summarize(total_pop = sum(estimate, na.rm = TRUE))
buffers <- st_buffer(stations_sf, dist = 16093) # 10 mile buffer
coverage_area <- st_make_valid(st_union(buffers)) # eliminate overlapping buffers
uncovered <- st_make_valid(st_difference(st_union(st_geometry(population)), coverage_area)) # uncovered area
uncovered_pop <- st_intersection(population, uncovered) |>
group_by(NAME) |>
summarize(total_pop = sum(estimate, na.rm = TRUE), .groups = "drop")
library(dplyr)
buffers <- st_buffer(stations_sf, dist = 16093) # 10 mile buffer
coverage_area <- st_make_valid(st_union(buffers)) # eliminate overlapping buffers
uncovered <- st_make_valid(st_difference(st_union(st_geometry(population)), coverage_area)) # uncovered area
uncovered_pop <- st_intersection(population, uncovered) |>
group_by(NAME) |>
summarize(total_pop = sum(estimate, na.rm = TRUE), .groups = "drop")
library(dplyr)
buffers <- st_buffer(stations_sf, dist = 16093) # 10 mile buffer
coverage_area <- st_make_valid(st_union(buffers)) # eliminate overlapping buffers
uncovered <- st_make_valid(st_difference(st_union(st_geometry(population)), coverage_area)) # uncovered area
uncovered_pop <- st_intersection(population, uncovered) |>
group_by(NAME) |>
dplyr::summarize(total_pop = sum(estimate, na.rm = TRUE), .groups = "drop")
ggplot() +
geom_sf(data = population, fill = "white", color = "gray") +
geom_sf(data = coverage_area, fill = "green", alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", alpha = 0.4) +
geom_sf(data = stations_sf, color = "darkgreen", size = 0.5) +
coord_sf(xlim = c(-81, -74), ylim = c(39, 43), expand = FALSE)
ggplot() +
geom_sf(data = coverage_area, fill = "green", alpha = 0.3)
ggplot() +
geom_sf(data = coverage_area, fill = "green", alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", alpha = 0.4)
ggplot() +
geom_sf(data = coverage_area, fill = "green", alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", alpha = 0.4) +
coord_sf(xlim = c(-81, -74), ylim = c(39, 43), expand = FALSE)
ggplot() +
geom_sf(data = population, fill = "white", color = "gray")
geom_sf(data = coverage_area, fill = "green", alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", alpha = 0.4) +
coord_sf(xlim = c(-81, -74), ylim = c(39, 43), expand = FALSE)
ggplot() +
geom_sf(data = population, fill = "white", color = "gray") +
geom_sf(data = coverage_area, fill = "green", alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", alpha = 0.4) +
coord_sf(xlim = c(-81, -74), ylim = c(39, 43), expand = FALSE)
ggplot() +
geom_sf(data = population, fill = "white", color = "gray") +
geom_sf(data = coverage_area, fill = "green", color - NA, alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", alpha = 0.4) +
coord_sf(xlim = c(-81, -74), ylim = c(39, 43), expand = FALSE)
ggplot() +
geom_sf(data = population, fill = "white", color = "gray") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", alpha = 0.4) +
coord_sf(xlim = c(-81, -74), ylim = c(39, 43), expand = FALSE)
ggplot() +
geom_sf(data = population, fill = "white", color = "gray") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.4) +
coord_sf(xlim = c(-81, -74), ylim = c(39, 43), expand = FALSE)
ev_locations <- read_csv("ev_station_locations.csv") |>
filter(!is.na(latitude), !is.na(longitude)) |>
filter(state == "PA")
ev_locations
coordinates <- ev_locations |>
select(longitude, latitude) |>
as.data.frame()
stations_sf <- st_as_sf(coordinates,
coords = c("longitude", "latitude"),
crs = 4326
)
stations_sf <- st_make_valid(stations_sf)
stations_sf
library(ggplot2)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthdata)
us <- ne_countries(scale = "medium", returnclass = "sf") |>
filter(admin == "United States of America")
ggplot(data = us) +
geom_sf() +
geom_sf(data = stations_sf, color = "green", size = 0.1) +
coord_sf(xlim = c(-81, -74), ylim = c(39, 43), expand = FALSE)
library(tidycensus)
population <- get_acs(geography = "county",
variables = "B01003_001",
year = 2022,
geometry = TRUE)
population <- st_transform(population, st_crs(stations_sf)) # match CRS
population <- st_make_valid(population) # make valid
library(osmdata)
highways_pa <- opq(bbox = c(-80.52, 39.72, -74.70, 42.27)) |>
add_osm_feature(key = 'highway', value = c('motorway')) |>
osmdata_sf()
library(dplyr)
buffers <- st_buffer(stations_sf, dist = 16093) # 10 mile buffer
coverage_area <- st_make_valid(st_union(buffers)) # eliminate overlapping buffers
uncovered <- st_make_valid(st_difference(st_union(st_geometry(population)), coverage_area)) # uncovered area
ggplot() +
geom_sf(data = population, fill = "white", color = "gray") +
geom_sf(data = coverage_area, fill = "green", color = NA, alpha = 0.3) +
geom_sf(data = uncovered, fill = "red", color = NA, alpha = 0.4) +
coord_sf(xlim = c(-81, -74), ylim = c(39, 43), expand = FALSE)
library(tidyverse)
library(dplyr)
library(janitor)
library(Hmisc)
library(ggplot2)
alt_fuel_stations <- read_csv("alt_fuel_stations (Jul 7 2025).csv")
alt_fuel_stations
set.seed(42)
alt_fuel_stations_clean <- clean_names(alt_fuel_stations)
alt_fuel_stations_clean
ev_stations <- filter(alt_fuel_stations_clean, fuel_type_code == "ELEC")
ev_stations
summary(ev_stations)
ev_stations_selected <- ev_stations |>
select(station_name, city, state, zip, country, latitude, longitude, ev_network)
ev_stations_selected
summary(ev_stations_selected)
sum(is.na(ev_stations_selected))
ev_stations_us <- filter(ev_stations_selected, country == "US")
ev_stations_us
ev_networks <- ev_stations_us[ ,"ev_network"]
table(ev_networks)
ev_stations_geo <- ev_stations_us |>
filter(!state %in% c("AK", "PR", "HI"))
unique(ev_stations_geo$state)
write.csv(ev_stations_geo, "ev_station_locations.csv")
ev_stations_by_state <- ev_stations_us |>
group_by(state) |>
summarise(total_stations = n()) |>
arrange(desc(total_stations))
ev_stations_by_state
ev_stations_by_state_10 <- ev_stations_us |>
group_by(state) |>
summarise(total_stations = n()) |>
arrange(desc(total_stations)) |>
head(10)
ggplot(ev_stations_by_state_10, aes(x = reorder(state, -total_stations), y = total_stations)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Top 10 States by Total EV Stations",
x = "State",
y = "EV Stations"
) +
geom_text(aes(label = total_stations), vjust = -0.2)
library(maps)
ggplot(ev_stations_us, aes(x = longitude, y = latitude)) +
borders("state") +
geom_point(alpha = 0.2, color = "green", size = 0.3) +
coord_fixed(1.3) +
labs(title = "US EV Charging Stations")
ev_registrations <- read_csv("ev_registration_by_state.csv")
ev_registrations <- clean_names(ev_registrations)
ev_registrations
ev_registrations_50 <- ev_registrations[!(ev_registrations$state) %in% c("District of Columbia", "Total"),]
ev_registrations_50
ev_registrations_50$state <- state.abb[match(ev_registrations_50$state, state.name)]
ev_registrations_50
ev_combined <- ev_stations_by_state |>
left_join(ev_registrations_50)
ev_combined <- ev_combined[!(ev_combined$state) %in% c("PR", "DC"),]
ev_combined
ev_combined <- ev_combined |>
arrange(desc(ev_combined$registration_count))
ev_combined
state_populations <- read_csv("state_populations.csv")
state_populations
state_populations$state <- state.abb[match(state_populations$state, state.name)]
state_populations
ev_combined_pop <- ev_combined |>
left_join(state_populations)
ev_combined_pop
ev_combined_pop <- ev_combined_pop |>
mutate(evs_per_station = round(registration_count / total_stations, 2)) |>
arrange(desc(evs_per_station))
ev_combined_pop
ev_combined_pop <- ev_combined_pop |>
mutate(people_per_station = round(population / total_stations, 2)) |>
arrange(desc(people_per_station))
ev_combined_pop
ev_combined_pop <- ev_combined_pop |>
mutate(pop_with_ev = round(registration_count / population, 4)) |>
arrange(desc(pop_with_ev))
ev_combined_pop
ev_stats <- ev_combined_pop # for later use
library(usmap)
plot_usmap(data = ev_combined_pop, values = "evs_per_station", color = "white") +
scale_fill_viridis_c(option = "C") +
labs(title = "EVs Per Charging Station in the US",
fill = "EVs/Station")
ggsave("evs_per_charging_station_us.png", bg = "grey")
plot_usmap(data = ev_combined_pop, values = "people_per_station", color = "white") +
scale_fill_viridis_c(option = "C") +
labs(title = "People Per Charging Station in the US",
fill = "People/Station")
ggsave("people_per_charging_station_us.png", bg = "grey")
plot_usmap(data = ev_combined_pop, values = "pop_with_ev", color = "white") +
scale_fill_viridis_c(option = "C") +
labs(title = "EV Saturation by Population",
fill = "EV Reg / Pop")
ggsave("ev_saturation_by_population.png", bg = "grey")
model_lm = lm(total_stations ~ registration_count + population, data = ev_combined_pop)
summary(model_lm)
ev_combined_pop <- ev_combined_pop |>
mutate(expected_stations = round(predict(model_lm), 0),
station_gap = expected_stations - total_stations) |>
arrange(desc(station_gap))
ev_combined_pop
plot_usmap(data = ev_combined_pop, values = "station_gap", color = "white") +
scale_fill_gradient2(
low = "blue", mid = "white", high = "red",
midpoint = 0, name = "Station Gap"
) +
labs(
title = "EV Charging Station Gaps by State",
subtitle = "Red = Underbuilt, Blue = Overbuilt"
)
ggsave("ev_charging_station_gaps_by_state.png", bg = "grey")
ev_combined_pop_10 <- ev_combined_pop |>
head(10)
ggplot(ev_combined_pop_10, aes(x = reorder(state, -station_gap), y = station_gap)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Top 10 Underbuilt EV States",
x = "State",
y = "Station Gap"
) +
geom_text(aes(label = station_gap), vjust = -0.2)
ggsave("top_10_underbuilt_states.png")
gas_stations <- read.csv("2012_gas_stations_us.csv")
gas_stations <- gas_stations |>
rename(gas_stations = X2012) |>
rename(state = State)
gas_stations$state <- state.abb[match(gas_stations$state, state.name)]
gas_stations
ev_gas_stations <- ev_stats |>
left_join(gas_stations) |>
select(state, total_stations, gas_stations) |>
mutate(difference = gas_stations - total_stations) |>
arrange(desc(difference))
ev_gas_stations
ev_gas_stats <- ev_stats |>
left_join(gas_stations)
model_lm_gas = lm(total_stations ~ registration_count + population + gas_stations, data = ev_gas_stats)
summary(model_lm_gas)
ev_gas_predicted <- ev_gas_stats |>
mutate(expected_stations = round(predict(model_lm_gas), 0),
station_gap = expected_stations - total_stations) |>
arrange(desc(station_gap))
ev_gas_predicted
plot_usmap(data = ev_gas_predicted, values = "station_gap", color = "white") +
scale_fill_gradient2(
low = "blue", mid = "white", high = "red",
midpoint = 0, name = "Station Gap"
) +
labs(
title = "EV Charging Station Gaps by State",
subtitle = "Red = Underbuilt, Blue = Overbuilt"
)
library(randomForest)
model_rfr_gas = randomForest(total_stations ~ registration_count + population + gas_stations, data = ev_gas_stats)
summary(model_rfr_gas)
ev_gas_predicted_rfr <- ev_gas_stats |>
mutate(expected_stations = round(predict(model_rfr_gas), 0),
station_gap = expected_stations - total_stations) |>
arrange(desc(station_gap))
ev_gas_predicted_rfr
plot_usmap(data = ev_gas_predicted_rfr, values = "station_gap", color = "white") +
scale_fill_gradient2(
low = "blue", mid = "white", high = "red",
midpoint = 0, name = "Station Gap"
) +
labs(
title = "EV Charging Station Gaps by State",
subtitle = "Red = Underbuilt, Blue = Overbuilt"
)
library(gbm)
model_gbm_gas = gbm(total_stations ~ registration_count + population + gas_stations, data = ev_gas_stats,
distribution = "gaussian", n.trees = 100)
summary(model_gbm_gas)
ev_gas_predicted_gbm <- ev_gas_stats |>
mutate(expected_stations = round(predict(model_gbm_gas), 0),
station_gap = expected_stations - total_stations) |>
arrange(desc(station_gap))
ev_gas_predicted_gbm
plot_usmap(data = ev_gas_predicted_gbm, values = "station_gap", color = "white") +
scale_fill_gradient2(
low = "blue", mid = "white", high = "red",
midpoint = 0, name = "Station Gap"
) +
labs(
title = "EV Charging Station Gaps by State",
subtitle = "Red = Underbuilt, Blue = Overbuilt"
)
ev_gas <- ev_gas_stats |>
rename(ev_stations = total_stations,
ev_registrations = registration_count)
ev_gas
state_areas <- read.csv("state_areas.csv")
state_areas$state <- state.abb[match(state_areas$state, state.name)]
state_areas
ev_gas_area <- ev_gas |>
left_join(state_areas) |>
arrange(desc(sq_mi))
ev_gas_area
model_lm <- lm(ev_stations ~ ev_registrations + population, data = ev_gas_area)
model_lm_gas <- lm(ev_stations ~ ev_registrations + population + gas_stations, data = ev_gas_area)
model_lm_area <- lm(ev_stations ~ ev_registrations + population + sq_mi, data = ev_gas_area)
model_lm_gas_area<- lm(ev_stations ~ ev_registrations + population + gas_stations + sq_mi, data = ev_gas_area)
summary(model_lm)
summary(model_lm_gas)
summary(model_lm_area)
summary(model_lm_gas_area)
ev_gas_area_predicted_lm<- ev_gas_area |>
mutate(expected_stations = round(predict(model_lm_gas_area), 0),
station_gap = expected_stations - ev_stations) |>
arrange(desc(station_gap))
ev_gas_area_predicted_lm
plot_usmap(data = ev_gas_area_predicted_lm, values = "station_gap", color = "white") +
scale_fill_gradient2(
low = "blue", mid = "white", high = "red",
midpoint = 0, name = "Station Gap"
) +
labs(
title = "EV Charging Station Gaps by State",
subtitle = "Red = Underbuilt, Blue = Overbuilt"
)
anova(model_lm, model_lm_gas)
anova(model_lm, model_lm_area)
anova(model_lm, model_lm_gas_area)
model_rfr <- randomForest(ev_stations ~ ev_registrations + population, data = ev_gas_area)
model_rfr_gas <- randomForest(ev_stations ~ ev_registrations + population + gas_stations, data = ev_gas_area)
model_rfr_area <- randomForest(ev_stations ~ ev_registrations + population + sq_mi, data = ev_gas_area)
model_rfr_gas_area<- randomForest(ev_stations ~ ev_registrations + population + gas_stations + sq_mi, data = ev_gas_area)
importance(model_rfr)
importance(model_rfr_gas)
importance(model_rfr_area)
importance(model_rfr_gas_area)
library(rfPermute)
model_rfr_perm <- rfPermute(ev_stations ~ ev_registrations + population, data = ev_gas_area)
model_rfr_gas_perm <- rfPermute(ev_stations ~ ev_registrations + population + gas_stations, data = ev_gas_area)
model_rfr_area_perm <- rfPermute(ev_stations ~ ev_registrations + population + sq_mi, data = ev_gas_area)
model_rfr_gas_area_perm <- rfPermute(ev_stations ~ ev_registrations + population + gas_stations + sq_mi, data = ev_gas_area)
summary(model_rfr_perm)
summary(model_rfr_gas_perm)
summary(model_rfr_area_perm)
summary(model_rfr_gas_area_perm)
ggplot(ev_stations_by_state_10, aes(x = reorder(state, -total_stations), y = total_stations)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Top 10 States by Total EV Stations",
x = "State",
y = "EV Stations"
) +
geom_text(aes(label = total_stations), vjust = -0.2)
ggsave("top_10_states_total_ev_stations.png")
ggplot(ev_stations_by_state_10, aes(x = reorder(state, -total_stations), y = total_stations)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Top 10 States by Total EV Stations",
x = "State",
y = "EV Stations"
) +
geom_text(aes(label = total_stations), vjust = -0.2)
ggsave("outputs/top_10_states_total_ev_stations.png")
